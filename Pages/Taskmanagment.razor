@page "/task-management"
@* Task Manager Page *@

<PageTitle>Task Management</PageTitle>

<style>
/* Clean and professional styles */
.task-manager {
    max-width: 900px;
    margin: auto;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    padding: 30px;
    background-color: #f4f7f6;
    border: 1px solid #dcdcdc;
    border-radius: 12px;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

h1 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
}

h2 {
    color: #4CAF50;
    margin-top: 20px;
    font-size: 1.5rem;
    font-weight: 600;
}

.progress-bar-container {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 20px;
}

progress {
    width: 100%;
    height: 20px;
}

input[type="date"],
input[type="text"],
select {
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 6px;
    width: 100%;
    margin-bottom: 15px;
}

label {
    font-weight: bold;
    display: block;
    margin-bottom: 5px;
}

button {
    width: 110px;
    background-color: #4CAF50;
    color: white;
    padding: 12px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s;
    text-align: center;
    margin: 10px;
}

button:hover {
    background-color: #45a049;
}

button:disabled {
    background-color: #b5d8b3;
    cursor: not-allowed;
}

.task-item,
.small-task-item {
    background-color: #fff;
    padding: 15px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    margin-bottom: 15px;
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
}

.task-item h4,
.small-task-item h6 {
    margin: 0;
    font-weight: 600;
    color: #333;
}

.task-list {
    margin-top: 40px;
    align-items: center;
}

.small-task-list {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    justify-content: space-between;
}

.trash {
    background-color: #f9f9f9;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
    margin-top: 40px;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}
</style>

<div class="task-manager">
    <h1>Task Management</h1>

    <!-- Progress Tracking -->
    <section class="progress-tracking">
        <h2>Progress Tracking</h2>
        <div class="progress-bar-container">
            <label for="progress">Task Progress:</label>
            <progress id="progress" value="@ProgressPercentage" max="100"></progress>
            <span>@ProgressPercentage%</span>
        </div>
    </section>

    <hr />

    <!-- Add Main Task -->
    <section class="add-task">
        <h2>Add New Main Task</h2>
        <label for="task-name">Task Name:</label>
        <input type="text" id="task-name" @bind="NewTaskName" placeholder="Enter main task name" />

        <button style="width: 100%; margin-left: 0%; cursor: pointer;"  @onclick="PromptForSubTasks" disabled="@string.IsNullOrEmpty(NewTaskName)">Add Main Task</button>
    </section>

    @if (ShowSubTasksForm)
    {
        <section class="sub-task-form">
            <h2>Divide Task into Smaller Tasks</h2>

            <label for="small-task-name">Small Task Name:</label>
            <input type="text" id="small-task-name" @bind="NewSmallTaskName" placeholder="Enter subtask name" />

            <label for="small-task-priority">Priority:</label>
            <select id="small-task-priority" @bind="NewSmallTaskPriority">
                <option value="Low">Low</option>
                <option value="Medium">Medium</option>
                <option value="High">High</option>
            </select>

            <label for="small-task-deadline">Deadline:</label>
            <input type="date" id="small-task-deadline" @bind="NewSmallTaskDeadline" />

            <button style="width: 100%; margin-left: 0%; cursor: pointer;"  @onclick="AddSmallTask" disabled="@string.IsNullOrEmpty(NewSmallTaskName)">Add Small Task</button>
        </section>
    }

    <!-- Task List -->
    <section class="task-list">
        <h2>Main Tasks</h2>
        @if (Tasks.Count == 0)
        {
            <p>No tasks added yet. Please add a task!</p>
        }
        else
        {
            @foreach (var task in Tasks)
            {
                <div class="task-item">
                    <h4>@task.Name</h4>
                    <p>Priority: <strong>@task.Priority</strong></p>
                    <p>Deadline: <strong>@task.Deadline.ToString("yyyy-MM-dd")</strong></p>
                    <p>Current Status: <strong>@task.Workflow</strong></p>
                    <button @onclick="() => MarkAsCompleted(task)"> Completed</button>
                    <button @onclick="() => RemoveTask(task)">Remove</button>

                    <!-- Show Small Tasks -->
                    <div class="small-task-list">
                        @foreach (var smallTask in task.SmallTasks.OrderBy(t => t.Priority))
                        {
                            <div class="small-task-item">
                                <h6>@smallTask.Name</h6>
                                <p>Priority: <strong>@smallTask.Priority</strong></p>
                                <p>Deadline: <strong>@smallTask.Deadline.ToString("yyyy-MM-dd")</strong></p>
                                <button @onclick="() => MarkSmallTaskAsCompleted(smallTask)">Complete</button>
                                <button @onclick="() => RemoveSmallTask(smallTask)">Remove</button>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </section>

  @if (Trash.Count > 0)
{
    <div class="trash">
        <h2>Trash</h2>
        @foreach (var task in Trash)
        {
            <div class="task-item">
                <h4>@task.Name</h4>
                <p>Priority: <strong>@task.Priority</strong></p>
                <p>Deadline: <strong>@task.Deadline.ToString("yyyy-MM-dd")</strong></p>
                <p>Status: <strong>@task.Workflow</strong></p>
                
                <button @onclick="() => RestoreTask(task)">Restore</button>
                <button  @onclick="() => PermanentlyRemoveTask(task)">Remove </button>
            </div>
        }
    </div>
}

</div>

@code {
    private string NewTaskName { get; set; }
    private bool ShowSubTasksForm { get; set; } = false;
    private string NewSmallTaskName { get; set; }
    private string NewSmallTaskPriority { get; set; } = "Medium";
    private DateTime NewSmallTaskDeadline { get; set; } = DateTime.Now;

    private List<Task> Tasks { get; set; } = new List<Task>();
    private List<Task> Trash { get; set; } = new List<Task>();

    private double ProgressPercentage => CalculateProgress();

    private void PromptForSubTasks()
    {
        if (string.IsNullOrWhiteSpace(NewTaskName))
        {
            return;
        }

        Tasks.Add(new Task
        {
            Name = NewTaskName,
            Priority = "Medium",
            Deadline = DateTime.Now,
            Workflow = "To Do",
            SmallTasks = new List<SmallTask>()
        });

        ShowSubTasksForm = true;
        NewTaskName = string.Empty;
    }

    private void AddSmallTask()
    {
        if (string.IsNullOrWhiteSpace(NewSmallTaskName))
        {
            return;
        }

        var task = Tasks.Last();
        task.SmallTasks.Add(new SmallTask
        {
            Name = NewSmallTaskName,
            Priority = NewSmallTaskPriority,
            Deadline = NewSmallTaskDeadline,
            Workflow = "To Do"
        });

        // Reset fields
        NewSmallTaskName = string.Empty;
        NewSmallTaskPriority = "Medium";
        NewSmallTaskDeadline = DateTime.Now;
    }

    private void MarkAsCompleted(Task task)
    {
        task.Workflow = "Completed";
        UpdateProgress();
        StateHasChanged();
    }

    private void MarkSmallTaskAsCompleted(SmallTask smallTask)
    {
        smallTask.Workflow = "Completed";
        UpdateProgress();
        StateHasChanged();
    }

    private void UpdateProgress()
    {
        // Recalculate overall progress when a task is completed
        StateHasChanged();
    }

    private void RemoveTask(Task task)
    {
        Tasks.Remove(task);
        Trash.Add(task);
        StateHasChanged();
    }

    private void RemoveSmallTask(SmallTask smallTask)
    {
        var task = Tasks.FirstOrDefault(t => t.SmallTasks.Contains(smallTask));
        if (task != null)
        {
            task.SmallTasks.Remove(smallTask);
            Trash.Add(new Task { Name = smallTask.Name, Priority = smallTask.Priority, Deadline = smallTask.Deadline, Workflow = "Removed" });
            StateHasChanged();
        }
    }

    private double CalculateProgress()
    {
        var completedTasks = Tasks.SelectMany(t => t.SmallTasks).Count(st => st.Workflow == "Completed") + Tasks.Count(t => t.Workflow == "Completed");
        var totalTasks = Tasks.SelectMany(t => t.SmallTasks).Count() + Tasks.Count;

        if (totalTasks == 0) return 0;

        return (completedTasks / (double)totalTasks) * 100;
    }

    public class Task
    {
        public string Name { get; set; }
        public string Priority { get; set; }
        public DateTime Deadline { get; set; }
        public string Workflow { get; set; }
        public List<SmallTask> SmallTasks { get; set; } = new List<SmallTask>();
    }

    public class SmallTask
    {
        public string Name { get; set; }
        public string Priority { get; set; }
        public DateTime Deadline { get; set; }
        public string Workflow { get; set; }
    }
        private void RestoreTask(Task task)
    {
        // Restore the task back to the main task list
        Tasks.Add(task);
        Trash.Remove(task);
        StateHasChanged();
    }

    private void PermanentlyRemoveTask(Task task)
    {
        // Permanently remove the task from trash
        Trash.Remove(task);
        StateHasChanged();
    }

}
